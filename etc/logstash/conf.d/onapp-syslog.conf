# config file for onapp syslog

input {
  tcp {
    port => 5045
    type => "nginx-access-log"
  }


filter {

 if [type] == "nginx-access-log" {
   grok {
         match => { "message" => "%{GREEDYDATA:skip_header}<13>%{SYSLOGTIMESTAMP:systime}\s+%{HOSTNAME:edgehostname}\s+%{NUMBER:wtfit}\t+%{NUMBER:wtfit2}\t+%{DATA:what}\t+%{WORD:protocol}\t+%{HTTPDATE:timestamp}\t+%{NUMBER:edgeserverid}\t+%{IPORHOST:clientip}\t+%{WORD:request_action}\t+%{HOSTNAME:hostname}\t+%{DATA:request}\t+%{NUMBER:response}\t+%{INT:bytes_sent}\t+%{WORD:upstream_http_x_cache}\t+%{ISO8601_SECOND:upstream_response_time}\t+%{ISO8601_SECOND:request_time}\t+%{NUMBER:tcpinfo_rtt}\t+%{NUMBER:for_operator}\t+%{NUMBER:resource_id}\t+%{HOSTNAME:server_name}\t+%{IPORHOST:server_addr}\t+%{GREEDYDATA:agent}" }
    add_tag => ["nginx_access"]
    remove_tag => ["_grokparsefailure"]
}

geoip {
      source => "clientip"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
      convert => ["response", "float"]
      convert => ["bytes_sent", "float"]
      convert => ["tcpinfo_rtt", "float"]
      convert => ["for_operator", "float"]

    }

}

}
output {
    elasticsearch {

        hosts => "localhost:9200"
    }

}-
